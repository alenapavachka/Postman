{
	"info": {
		"_postman_id": "8e24d819-fd68-4556-90af-09312b607a2d",
		"name": "CALIFORNIA MARKETING ADDRESSES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27779525",
		"_collection_link": "https://grey-resonance-990547.postman.co/workspace/QASV.US~2b456bd2-c07d-46e4-ab4f-f9454553ae08/collection/27779525-8e24d819-fd68-4556-90af-09312b607a2d?action=share&creator=27779525&source=collection_link"
	},
	"item": [
		{
			"name": "Add new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Body contains 'id'\",  () => {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"Alena\",\n            \"lastName\": \"Pavachka\"\n        },\n        \"company\": \"Moonstone and Co\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"7117 Rosemead Blvd\",\n        \"addressLine2\": \"116\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"San Gabriel\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"91775\",\n        \"phoneNumber\": \"(415) 370-6169\",\n        \"location\": null\n    },\n    \"setAsDefault\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"6a9567f6-31a1-47ac-8c51-0d061e92bc4c\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default  postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"pm.test(\"Body JSON is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Alena\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Pavachka\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"San Gabriel\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"91775\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"(415) 370-6169\");",
							"    pm.expect(jsonData.address.company).to.eql(\"Moonstone and Co\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"7117 Rosemead Blvd\");",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"116\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show All Existing postal Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 10000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Specific postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"",
							"pm.test(\"Body JSON is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Alena\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Pavachka\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"San Gabriel\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"91775\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"(415) 370-6169\");",
							"    pm.expect(jsonData.address.company).to.eql(\"Moonstone and Co\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"7117 Rosemead Blvd\");",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"116\");",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response body is in a correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.company).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/e1409fa2-7a28-406b-a812-668151c85ed7",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"e1409fa2-7a28-406b-a812-668151c85ed7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"1a87e729-7288-4e7e-a215-46de142fc9f1\",\n        \"fullName\": {\n            \"firstName\": \"CJ\",\n            \"lastName\": \"Lucero\"\n        },\n        \"company\": \"Google\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"1875 Tobias Ave\",\n        \"addressLine2\": \"375\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"Panorama City\",\n        \"country\": \"US\",\n        \"subdivision\": \"NJ\",\n        \"zipCode\": \"34567\",\n        \"phoneNumber\": \"(777) 666-5544\",\n        \"location\": null\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/e1409fa2-7a28-406b-a812-668151c85ed7",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"e1409fa2-7a28-406b-a812-668151c85ed7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check updated postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"",
							"pm.test(\"Body JSON is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"CJ\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Lucero\");",
							"    pm.expect(jsonData.address.country).to.eql(\"US\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"NJ\");",
							"    pm.expect(jsonData.address.city).to.eql(\"Panorama City\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"34567\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"(777) 666-5544\");",
							"    pm.expect(jsonData.address.company).to.eql(\"Google\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"1875 Tobias Ave\");",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"375\");",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(false);",
							"});",
							"",
							"pm.test(\"Body JSON is correct/OTHER OPTION\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.id === (\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"    jsonData.firstName === (\"CJ\");",
							"    jsonData.lastName === (\"Lucero\");",
							"    jsonData.country === (\"US\");",
							"    jsonData.subdivision === (\"NJ\");",
							"    jsonData.city === (\"Panorama City\");",
							"    jsonData.zipCode === (\"34567\");",
							"    jsonData.phoneNumber === (\"(777) 666-5544\");",
							"    jsonData.compony === (\"Google\");",
							"    jsonData.addressLine1 === (\"1875 Tobias Ave\");",
							"    jsonData.addressLine2 === (\"375\");",
							"    jsonData.isDefaultAddress === (false);",
							"});",
							"",
							"pm.test(\"Response body is in a correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.company).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/e1409fa2-7a28-406b-a812-668151c85ed7",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"e1409fa2-7a28-406b-a812-668151c85ed7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = true;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include('{}');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/6a9567f6-31a1-47ac-8c51-0d061e92bc4c",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"6a9567f6-31a1-47ac-8c51-0d061e92bc4c"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = false;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = true;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 400 Bad Request\"] = responseCode.code === 400;",
							"",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.badRequest;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"pm.test(\"cant_find = ID/CUSTOM\"), function (){",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.details.cant_find === (\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"};",
							"",
							"pm.test(\"cant_find = ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"pm.test(\"Body JSON is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"cant_find_address_by_id, details: {\\\"cant_find\\\":\\\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\\\"}\");",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"pm.test(\"Response body is in a correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.a('string');",
							"    pm.expect(jsonData.details).to.be.a('object');",
							"    pm.expect(jsonData.details.cant_find).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/e1409fa2-7a28-406b-a812-668151c85ed7",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"e1409fa2-7a28-406b-a812-668151c85ed7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Deleted postal address 2ed time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response Code is 200\"] = false;",
							"} else if (responseCode.code === 401){",
							"    tests[\"Not authorized, check access token or Log in\"] = false;",
							"} else if (responseCode.code == 403){",
							"    tests[\"Forbidden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not found. Check if you'va made a correct request\"] = true;",
							"} else if (responseCode.code === 422){",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check the responce body\"]",
							"}",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 is ok. The request was successful\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 - Not Found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 - Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 - Unauthorized\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 - Rerquest is timed out\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 - Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 - Server unavailable\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 - Network connection timeout error\"] = false;",
							"        break",
							"    default:",
							"        tests[\"Sorry, check the code\" + responseCode.code]  = false;   ",
							"}",
							"",
							"",
							"",
							"tests[\"Response code is 400 Bad Request\"] = responseCode.code === 400;",
							"",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.badRequest;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"tests[\"Response Time is acceptable; less than 1000ms\"] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response is ok for us to proceed\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"pm.test(\"cant_find = ID/CUSTOM\"), function (){",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.details.cant_find === (\"address_id: 9e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"};",
							"",
							"pm.test(\"cant_find = ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"",
							"pm.test(\"Body JSON is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"cant_find_address_by_id, details: {\\\"cant_find\\\":\\\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\\\"}\");",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: e1409fa2-7a28-406b-a812-668151c85ed7\");",
							"});",
							"pm.test(\"Response body is in a correct format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.a('string');",
							"    pm.expect(jsonData.details).to.be.a('object');",
							"    pm.expect(jsonData.details.cant_find).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/e1409fa2-7a28-406b-a812-668151c85ed7",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"e1409fa2-7a28-406b-a812-668151c85ed7"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "WNdiAmNh5CSbPQgYVMlLLmgP7w_uKFEFLgfxXowZHIE.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTA3LTMwVDIyOjM1OjA3LjE0N1oiLCJ1aWQiOiI2NGMzYzMwMS1jMjRhLTRjYzQtYTk5Zi1hYmFiZjBlOGQ0YjMiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjMzOTZjOGQ1LTViYmQtNGIxMC1iOThlLTQxNzkxNjEwZWZjZiIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0wNy0zMVQwMjozNTowNy4xNDdaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
